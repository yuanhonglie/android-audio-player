/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_yhl_jni_SoundTouch */
#ifndef _Included_com_yhl_jni_SoundTouch
#define _Included_com_yhl_jni_SoundTouch
#ifdef __cplusplus
extern "C" {
#endif

#include "../SoundTouch.h"
#define BUFFER_SIZE 4096

soundtouch::SoundTouch mSoundTouch;


/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    setSampleRate
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_setSampleRate
  (JNIEnv *env, jobject obj, jint sampleRate)
{
	mSoundTouch.setSampleRate(sampleRate);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    setChannels
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_setChannels
  (JNIEnv *env, jobject obj, jint channel)
{
	mSoundTouch.setChannels(channel);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    setTempoChange
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_setTempoChange
  (JNIEnv *env, jobject obj, jfloat newTempo)
{
	mSoundTouch.setTempoChange(newTempo);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    setPitchSemiTones
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_setPitchSemiTones
  (JNIEnv *env, jobject obj, jint pitch)
{
	mSoundTouch.setPitchSemiTones(pitch);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    setRateChange
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_setRateChange
  (JNIEnv *env, jobject obj, jfloat newRate)
{
	mSoundTouch.setRateChange(newRate);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    putSamples
 * Signature: ([SI)V
 */
JNIEXPORT void JNICALL Java_com_yhl_jni_SoundTouch_putSamples
  (JNIEnv *env, jobject obj, jshortArray samples, jint len)
{
	// 转换为本地数组
	jshort *input_samples = env->GetShortArrayElements(samples, NULL);
	mSoundTouch.putSamples(input_samples, len);
	// 释放本地数组(避免内存泄露)
	env->ReleaseShortArrayElements(samples, input_samples, 0);
}

/*
 * Class:     com_yhl_jni_SoundTouch
 * Method:    receiveSamples
 * Signature: ([SI)I
 */
JNIEXPORT jshortArray JNICALL Java_com_yhl_jni_SoundTouch_receiveSamples
  (JNIEnv *env, jobject obj)
{
	short buffer[BUFFER_SIZE];
	int nSamples = mSoundTouch.receiveSamples(buffer, BUFFER_SIZE);

	// 局部引用，创建一个short数组
	jshortArray receiveSamples = env->NewShortArray(nSamples);
	// 给short数组设置值
	env->SetShortArrayRegion(receiveSamples, 0, nSamples, buffer);

	return receiveSamples;
}

#ifdef __cplusplus
}
#endif
#endif


